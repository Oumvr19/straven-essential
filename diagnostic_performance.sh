#!/bin/bash

# ====================
# DIAGNOSTIC PERFORMANCE - STRAVEN ESSENTIAL
# Script de v√©rification des optimisations
# ====================

echo "üöÄ DIAGNOSTIC PERFORMANCE - Straven Essential"
echo "=============================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
PASSED=0
FAILED=0
WARNINGS=0

# ====================
# 1. V√âRIFICATION DES FICHIERS
# ====================
echo "üìÅ 1. V√âRIFICATION DES FICHIERS"
echo "--------------------------------"

# Version 2 index.html
if [ -f "html/version 2/index.html" ]; then
    echo -e "${GREEN}‚úì${NC} index.html trouv√©"
    ((PASSED++))
else
    echo -e "${RED}‚úó${NC} index.html MANQUANT"
    ((FAILED++))
fi

# Version 2 style.css
if [ -f "html/version 2/style.css" ]; then
    echo -e "${GREEN}‚úì${NC} style.css trouv√©"
    ((PASSED++))
else
    echo -e "${RED}‚úó${NC} style.css MANQUANT"
    ((FAILED++))
fi

# .htaccess
if [ -f ".htaccess" ]; then
    echo -e "${GREEN}‚úì${NC} .htaccess trouv√©"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} .htaccess manquant (optionnel pour serveurs Apache)"
    ((WARNINGS++))
fi

echo ""

# ====================
# 2. V√âRIFICATION IMAGE HERO
# ====================
echo "üñºÔ∏è  2. OPTIMISATION IMAGE HERO"
echo "--------------------------------"

# Image WebP
if [ -f "img/head_bg.webp" ]; then
    SIZE=$(du -h "img/head_bg.webp" | cut -f1)
    echo -e "${GREEN}‚úì${NC} head_bg.webp trouv√© (${SIZE})"
    
    # V√©rifier la taille
    SIZE_KB=$(du -k "img/head_bg.webp" | cut -f1)
    if [ $SIZE_KB -lt 150 ]; then
        echo -e "${GREEN}‚úì${NC} Taille optimale (<150KB)"
        ((PASSED++))
    else
        echo -e "${YELLOW}‚ö†${NC} Taille √† optimiser (${SIZE_KB}KB > 150KB cible)"
        ((WARNINGS++))
    fi
else
    echo -e "${RED}‚úó${NC} head_bg.webp MANQUANT - Convertir head_bg.png"
    echo "   ‚Üí Utiliser Squoosh.app ou cwebp"
    ((FAILED++))
fi

# Image PNG originale
if [ -f "img/head_bg.png" ]; then
    SIZE=$(du -h "img/head_bg.png" | cut -f1)
    echo -e "${YELLOW}‚Ñπ${NC}  head_bg.png pr√©sent (${SIZE}) - Remplacer par WebP recommand√©"
fi

echo ""

# ====================
# 3. V√âRIFICATION CRITICAL CSS
# ====================
echo "üé® 3. CRITICAL CSS INLINE"
echo "--------------------------------"

if grep -q "<style>" "html/version 2/index.html"; then
    echo -e "${GREEN}‚úì${NC} Critical CSS d√©tect√© dans <head>"
    
    # Compter les lignes de CSS critique
    LINES=$(grep -A 100 "<style>" "html/version 2/index.html" | grep -B 100 "</style>" | wc -l)
    echo "   ‚Üí ${LINES} lignes de CSS critique"
    ((PASSED++))
else
    echo -e "${RED}‚úó${NC} Critical CSS manquant"
    ((FAILED++))
fi

echo ""

# ====================
# 4. V√âRIFICATION PRELOAD
# ====================
echo "‚ö° 4. PRELOAD RESSOURCES CRITIQUES"
echo "--------------------------------"

# Preload image hero
if grep -q 'rel="preload".*head_bg.webp' "html/version 2/index.html"; then
    echo -e "${GREEN}‚úì${NC} Preload image hero configur√©"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} Preload image hero manquant ou incorrect"
    ((WARNINGS++))
fi

# Preload CSS
if grep -q 'rel="preload".*style.css' "html/version 2/index.html"; then
    echo -e "${GREEN}‚úì${NC} Preload style.css configur√©"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} Preload style.css manquant"
    ((WARNINGS++))
fi

echo ""

# ====================
# 5. V√âRIFICATION FONTS
# ====================
echo "üî§ 5. OPTIMISATION FONTS"
echo "--------------------------------"

# Font-display swap
if grep -q 'display=swap' "html/version 2/index.html"; then
    echo -e "${GREEN}‚úì${NC} font-display:swap activ√©"
    ((PASSED++))
else
    echo -e "${RED}‚úó${NC} font-display:swap MANQUANT"
    ((FAILED++))
fi

# Fonts locales (optionnel)
if [ -d "html/version 2/fonts" ]; then
    COUNT=$(ls "html/version 2/fonts"/*.woff2 2>/dev/null | wc -l)
    if [ $COUNT -gt 0 ]; then
        echo -e "${GREEN}‚úì${NC} Fonts locales trouv√©es (${COUNT} fichiers)"
        ((PASSED++))
    fi
else
    echo -e "${YELLOW}‚Ñπ${NC}  Fonts Google CDN utilis√©es (optionnel: h√©berger localement pour -200ms LCP)"
fi

echo ""

# ====================
# 6. V√âRIFICATION IMAGES LAZY-LOAD
# ====================
echo "üñºÔ∏è  6. LAZY-LOADING IMAGES"
echo "--------------------------------"

LAZY_COUNT=$(grep -c 'loading="lazy"' "html/version 2/index.html" 2>/dev/null || echo "0")
if [ $LAZY_COUNT -gt 0 ]; then
    echo -e "${GREEN}‚úì${NC} ${LAZY_COUNT} images en lazy-load"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} Aucune image en lazy-load trouv√©e"
    ((WARNINGS++))
fi

echo ""

# ====================
# 7. V√âRIFICATION WIDTH/HEIGHT IMAGES
# ====================
echo "üìê 7. DIMENSIONS IMAGES (anti-CLS)"
echo "--------------------------------"

IMG_COUNT=$(grep -c '<img' "html/version 2/index.html" 2>/dev/null || echo "0")
IMG_WITH_DIMS=$(grep -c '<img.*width=.*height=' "html/version 2/index.html" 2>/dev/null || echo "0")

if [ $IMG_COUNT -eq $IMG_WITH_DIMS ]; then
    echo -e "${GREEN}‚úì${NC} Toutes les images ont width/height (${IMG_COUNT}/${IMG_COUNT})"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} ${IMG_WITH_DIMS}/${IMG_COUNT} images ont width/height"
    ((WARNINGS++))
fi

echo ""

# ====================
# 8. V√âRIFICATION GRAYSCALE FILTERS
# ====================
echo "üé® 8. FILTRES CSS (Performance GPU)"
echo "--------------------------------"

GRAYSCALE_COUNT=$(grep -c 'grayscale' "html/version 2/style.css" 2>/dev/null || echo "0")
if [ $GRAYSCALE_COUNT -eq 0 ]; then
    echo -e "${GREEN}‚úì${NC} Pas de filtres grayscale (optimis√©)"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} ${GRAYSCALE_COUNT} filtres grayscale trouv√©s (impact INP)"
    ((WARNINGS++))
fi

echo ""

# ====================
# 9. V√âRIFICATION SEO
# ====================
echo "üîç 9. SEO META TAGS"
echo "--------------------------------"

# Open Graph
OG_COUNT=$(grep -c 'og:' "html/version 2/index.html" 2>/dev/null || echo "0")
if [ $OG_COUNT -ge 5 ]; then
    echo -e "${GREEN}‚úì${NC} Open Graph configur√© (${OG_COUNT} tags)"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} Open Graph incomplet (${OG_COUNT} tags)"
    ((WARNINGS++))
fi

# JSON-LD
if grep -q 'application/ld+json' "html/version 2/index.html"; then
    echo -e "${GREEN}‚úì${NC} JSON-LD Schema.org pr√©sent"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} JSON-LD manquant"
    ((WARNINGS++))
fi

# Sitemap
if [ -f "sitemap.xml" ]; then
    echo -e "${GREEN}‚úì${NC} sitemap.xml trouv√©"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} sitemap.xml manquant"
    ((WARNINGS++))
fi

# Robots.txt
if [ -f "robots.txt" ]; then
    echo -e "${GREEN}‚úì${NC} robots.txt trouv√©"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†${NC} robots.txt manquant"
    ((WARNINGS++))
fi

echo ""

# ====================
# 10. V√âRIFICATION COMPRESSION
# ====================
echo "üóúÔ∏è  10. COMPRESSION & CACHE"
echo "--------------------------------"

if [ -f ".htaccess" ]; then
    if grep -q 'mod_deflate' ".htaccess"; then
        echo -e "${GREEN}‚úì${NC} Compression Gzip configur√©e"
        ((PASSED++))
    fi
    
    if grep -q 'mod_brotli' ".htaccess"; then
        echo -e "${GREEN}‚úì${NC} Compression Brotli configur√©e"
        ((PASSED++))
    fi
    
    if grep -q 'mod_expires' ".htaccess"; then
        echo -e "${GREEN}‚úì${NC} Cache-Control configur√©"
        ((PASSED++))
    fi
else
    echo -e "${YELLOW}‚Ñπ${NC}  .htaccess absent - Compression/cache non v√©rifiable"
fi

echo ""
echo ""

# ====================
# R√âSUM√â
# ====================
echo "======================================"
echo "üìä R√âSUM√â DU DIAGNOSTIC"
echo "======================================"
echo -e "${GREEN}‚úì R√©ussi:${NC}      $PASSED"
echo -e "${YELLOW}‚ö† Avertissements:${NC} $WARNINGS"
echo -e "${RED}‚úó √âchecs:${NC}      $FAILED"
echo ""

TOTAL=$((PASSED + WARNINGS + FAILED))
SCORE=$((PASSED * 100 / TOTAL))

if [ $SCORE -ge 90 ]; then
    echo -e "${GREEN}üéâ EXCELLENT${NC} - Score: ${SCORE}%"
elif [ $SCORE -ge 70 ]; then
    echo -e "${YELLOW}‚úÖ BON${NC} - Score: ${SCORE}%"
else
    echo -e "${RED}‚ö†Ô∏è  √Ä AM√âLIORER${NC} - Score: ${SCORE}%"
fi

echo ""
echo "üìã ACTIONS RECOMMAND√âES:"
echo "------------------------"

if [ ! -f "img/head_bg.webp" ]; then
    echo "1. üî¥ PRIORIT√â - Convertir head_bg.png en WebP"
    echo "   ‚Üí https://squoosh.app (qualit√© 75-80, max 1920px)"
fi

if [ $LAZY_COUNT -eq 0 ]; then
    echo "2. üü° Ajouter loading=\"lazy\" sur les images non-critiques"
fi

if [ $GRAYSCALE_COUNT -gt 0 ]; then
    echo "3. üü° Supprimer les filtres grayscale pour am√©liorer INP"
fi

if [ ! -d "html/version 2/fonts" ]; then
    echo "4. üü¢ OPTIONNEL - H√©berger fonts localement (-200ms LCP)"
fi

echo ""
echo "üß™ TESTER LES PERFORMANCES:"
echo "---------------------------"
echo "‚Ä¢ PageSpeed Insights: https://pagespeed.web.dev/"
echo "‚Ä¢ WebPageTest:        https://webpagetest.org/"
echo "‚Ä¢ Chrome DevTools:    F12 ‚Üí Lighthouse"
echo ""

echo "‚úÖ Diagnostic termin√©!"
echo ""
